name: Build SVM-s and maps + Run training

on: [push, pull_request]

jobs:
  ensure-image:
    runs-on: self-hosted
    container:
      image: ubuntu:24.04
    env:
      PIP_ROOT_USER_ACTION: ignore
    permissions:
      packages: write
    outputs:
      docker_hash: ${{ steps.hash.outputs.hash }}
    steps:
      - name: Install git
        run: |
          apt update && apt install -y git

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure repo
        run: |
          git config --global --add safe.directory /__w/PySymGym/PySymGym
          # Fetch history for PR
          git fetch --depth=1 origin ${{ github.base_ref }}  
          # Fetch history for push
          git fetch origin main

      - name: Check for Dockerfile changes
        id: dockerfile_check
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            BASE_REF="${{ github.event.before }}"
            HEAD_REF="${{ github.sha }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_REF="${{ github.event.pull_request.base.sha }}"
            HEAD_REF="${{ github.event.pull_request.head.sha }}"
          fi
          hash_head=$(git ls-tree "$HEAD_REF" .github/docker/Dockerfile | awk '{print $3}')
          hash_prev=$(git ls-tree "$BASE_REF" .github/docker/Dockerfile | awk '{print $3}')

          if [ "$hash_head" = "$hash_prev" ]; then
            echo "docker_changed=false" >> $GITHUB_OUTPUT
          else
            echo "docker_changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Calculate Dockerfile hash
        id: hash
        run: |
          HASH=$(sha1sum .github/docker/Dockerfile | cut -d ' ' -f 1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Install deps
        if: ${{ steps.dockerfile_check.outputs.docker_changed == 'true' }}
        run: |
          apt update && apt install -y curl
          curl https://get.docker.com/ | bash

      - name: Login to GitHub Container Registry
        if: ${{ steps.dockerfile_check.outputs.docker_changed == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: pysymgym
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push the image if needed
        if: ${{ steps.dockerfile_check.outputs.docker_changed == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .github/docker/
          push: true
          tags: ghcr.io/pysymgym/pysymgym:${{ steps.hash.outputs.hash }}

  build-and-launch:
    needs: ensure-image
    runs-on: self-hosted
    container:
      image: ghcr.io/pysymgym/pysymgym:${{ needs.ensure-image.outputs.docker_hash }}
    env:
      PIP_ROOT_USER_ACTION: ignore
    permissions:
      packages: read
    steps:
      - name: Debug
        run: |
          printenv
          dotnet --version

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.8"

      - name: Install poetry
        run: |
          pip install poetry

      - name: Install dependencies
        run: |
          poetry --ansi install -q

      - name: Build V# game server
        working-directory: ./GameServers/VSharp/
        run: |
          dotnet build VSharp.ML.GameServer.Runner -c Release

      - name: Build .NET game maps
        working-directory: ./maps/DotNet/Maps
        run: |
          dotnet build Root -c Release

      - name: Generate initial data for training
        working-directory: ./GameServers/VSharp/VSharp.ML.GameServer.Runner/bin/Release/net7.0
        run: |
          dotnet VSharp.ML.GameServer.Runner.dll \
            --mode generator \
            --datasetbasepath ${GITHUB_WORKSPACE}/maps/DotNet/Maps/Root/bin/Release/net7.0 \
            --datasetdescription ${GITHUB_WORKSPACE}/workflow/dataset_for_tests_net.json \
            --stepstoserialize 200

      - name: Move SerializedEpisodes
        working-directory: ./AIAgent
        run: |
          mkdir report
          mv ../GameServers/VSharp/VSharp.ML.GameServer.Runner/bin/Release/net7.0/8100/SerializedEpisodes/ report/

      - name: Launch application
        working-directory: ./AIAgent
        run: |
          poetry --ansi run python3 launch_servers.py --config ../workflow/config_for_tests.yml &
          echo "Waiting for server to start..." && sleep 10

      - name: Run MLFlow server
        working-directory: ./AIAgent
        run: |
          poetry --ansi run mlflow server -h 127.0.0.1 -p 8080 --serve-artifacts &
          echo "Waiting for mlflow server to start..." && sleep 10

      - name: Run training
        working-directory: ./AIAgent
        run: |
          poetry --ansi run python3 run_training.py --config ../workflow/config_for_tests.yml

      - name: Upload mlartifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: AIAgent/mlartifacts/**/**/artifacts/**

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: AIAgent/*.log

      - name: Sanity check
        working-directory: ./AIAgent
        run: |
          if ls report/study.pkl 1> /dev/null 2>&1; then
              echo "PKL files found."
          else
              echo "No PKL files found."
              exit 1
          fi
